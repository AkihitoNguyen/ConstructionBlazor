@rendermode InteractiveServer

<EditForm Model="@formContactModel" class="email-form" FormName="email-form" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInValidSubmit">
    <DataAnnotationsValidator />
    <h3>LIÊN HỆ NGAY</h3>
    <p>Chúng tôi luôn sẵn sàng hỗ trợ bạn. Hãy để lại thông tin của bạn, và chúng tôi sẽ liên hệ trong thời gian sớm nhất.</p>
    <div class="row gy-3">

        <div class="col-12">
            <InputText type="text" @bind-Value="formContactModel.Name" class="form-control" placeholder="Name"></InputText>
            <ValidationMessage For="@(() => formContactModel.Name)" class="text-danger" />
        </div>

        <div class="col-12 ">
            <InputText type="email" @bind-Value="formContactModel.Email" class="form-control" placeholder="Email"></InputText>
            <ValidationMessage For="@(() => formContactModel.Email)" class="text-danger" />
        </div>

        <div class="col-12">
            <InputText type="text" @bind-Value="formContactModel.Phone" class="form-control"  placeholder="Phone"></InputText>
            <ValidationMessage For="@(() => formContactModel.Phone)" class="text-danger" />
        </div>

        <div class="col-12">
            <InputTextArea class="form-control" @bind-Value="formContactModel.Description" rows="6" placeholder="Message"></InputTextArea>
            <ValidationMessage For="@(() => formContactModel.Description)" class="text-danger" />
        </div>

        <div class="col-12 text-center">
            <div class="loading">Loading</div>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
            <div class="error-message">@ErrorMessage</div>
            }
            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
            <div class="sent-message"> @SuccessMessage </div>
            }
            <button type="submit" class="">Đăng ký</button>
        </div>
    </div>
</EditForm>


@code{

    [SupplyParameterFromForm]
    private FormContactModel? formContactModel { get; set; } = new();


    private string SuccessMessage = string.Empty;
    private string ErrorMessage = string.Empty;
    private async Task HandleValidSubmit()
    {
      //  await Task.Delay(500);
        SuccessMessage = "Your quote request has been sent successfully. Thank you!";
        ErrorMessage = string.Empty;
    }

    private async Task HandleInValidSubmit()
    {
        await Task.Delay(100);
        ErrorMessage = "Vui lòng kiểm tra lại thông tin.";
        SuccessMessage = string.Empty!;
        
    }
}

